name: Release and deploy changes
concurrency: release
on:
  push:
    branches:
      - main

permissions: read-all

jobs:
  push-new-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: get image id
        run: |
          export IMAGE_ID=$(echo "ghcr.io/${{ github.repository }}:latest" | tr "[:upper:]" "[:lower:]")
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
      - name: build prod image
        run: |
          docker build . --target prod-env -t ${{ env.IMAGE_ID}} --label "run=${GITHUB_RUN_ID}"
      - name: log in to github registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: push image to github registry
        run: |
          docker push ${{ env.IMAGE_ID}}

  terraform-apply-nonprod:
    runs-on: ubuntu-latest
    needs:
      - push-new-image
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create config files
        run: |
          cat > config.tfbackend << EOL
            ${{ secrets.CONFIG_TFBACKEND_NONPROD }}
          EOL
          cat > config.tfvars << EOL
            ${{ secrets.CONFIG_TFVARS_NONPROD }}
            repository="${{ github.repository }}"
          EOL
      - name: terraform apply
        uses: dflook/terraform-apply@v1.29.1
        with:
          path: terraform/envs/nonprod
          backend_config_file: config.tfbackend
          var_file: config.tfvars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-destroy-nonprod:
    runs-on: ubuntu-latest
    needs:
      - terraform-apply-nonprod
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create config files
        run: |
          cat > config.tfbackend << EOL
            ${{ secrets.CONFIG_TFBACKEND_NONPROD }}
          EOL
          cat > config.tfvars << EOL
            ${{ secrets.CONFIG_TFVARS_NONPROD }}
            repository="${{ github.repository }}"
          EOL
      - name: terraform destroy
        uses: dflook/terraform-destroy@v1.29.1
        with:
          path: terraform/envs/nonprod
          backend_config_file: config.tfbackend
          var_file: config.tfvars

  terraform-apply-prod:
    runs-on: ubuntu-latest
    needs:
      - terraform-apply-nonprod
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create config files
        run: |
          cat > config.tfbackend << EOL
            ${{ secrets.CONFIG_TFBACKEND_PROD }}
          EOL
          cat > config.tfvars << EOL
            ${{ secrets.CONFIG_TFVARS_PROD }}
            repository="${{ github.repository }}"
          EOL
      - name: terraform apply
        uses: dflook/terraform-apply@v1.29.1
        with:
          path: terraform/envs/prod
          backend_config_file: config.tfbackend
          var_file: config.tfvars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
